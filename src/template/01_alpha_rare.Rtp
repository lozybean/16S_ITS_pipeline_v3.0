library(WGCNA)
table = read.table('@#{otu_table}', sep = "\t",head = T, check.names=F)
group=read.table('@#{group_file}', sep = "\t",head = F,row.names=1, check.names=F)
pdf('@#{pdf_file}')
par(mar=c(5.1,5.1,3.1,2.1))

readnumber = as.numeric(as.character(table[,2]))
table = table[,-c(1, 2, 3)]

group=group[colnames(table),1]
group=as.data.frame(group)
rownames(group)=colnames(table)
colors=labels2colors(group)
g=unique(group)
g_order=g[order(g),1]
gcols=unique(colors)
gcols_order=gcols[order(g)]
ymax=max(as.numeric(as.character(table[table != "n/a"])))

# plot blank canvas
plot(0,0,xlim=c(0,max(readnumber)+1800),ylim=c(0,ymax),type="n",xlab="reads",ylab="@#{alpha_name}",cex.lab=1.4)
legend("topright",legend=g_order,col=gcols_order,seg.len=1.5,lwd=1.6,cex=0.8)

# fitting function
otu <- function(reads, vmax, km){
  vmax * reads / (km + reads)
}

for(i in 1:ncol(table))
{
  col = table[,i]
  col = as.numeric(as.character(col[col != "n/a"]))
  readnum = readnumber[1:length(col)]
  color=colors[i]
  min = Inf
  for(km in c(10,1000,4000,10000)){
    estimation <- tryCatch(
		nls(col~otu(readnum, vmax, km), start=list( vmax = max(col), km=km),lower=c(0,0.2),algorithm = "port"),
		error=function(e) e
	)
	if(class(estimation)[1] == 'simpleError'){
		next
	}
    if(min > deviance(estimation)){
		min = deviance(estimation)
		min_estimation = estimation
    }
  }
  estimation = min_estimation
  x = seq(0,max(readnum), 1)
  y = otu(x, coef(estimation)[1], coef(estimation)[2])
  lines(x,y,col=color,lwd=2)
}

dev.off()

